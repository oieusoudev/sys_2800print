import { useState, useEffect, useCallback } from 'react';
import { LocationData, GeolocationState } from '@/types';

export function useGeolocation() {
  const [state, setState] = useState<GeolocationState>({
    location: null,
    isLoading: false,
    error: null,
    attempts: 0,
    lastUpdate: null
  });

  const [watchId, setWatchId] = useState<number | null>(null);

  const updateLocation = useCallback((position: GeolocationPosition) => {
    const newLocation: LocationData = {
      lat: position.coords.latitude,
      lng: position.coords.longitude,
      accuracy: position.coords.accuracy,
      timestamp: position.timestamp,
      altitude: position.coords.altitude || undefined,
      speed: position.coords.speed || undefined
    };

    setState(prev => ({
      ...prev,
      location: newLocation,
      isLoading: false,
      error: null,
      lastUpdate: new Date()
    }));

    console.log('üìç Nova localiza√ß√£o obtida:', {
      coords: `${newLocation.lat.toFixed(6)}, ${newLocation.lng.toFixed(6)}`,
      accuracy: `${newLocation.accuracy}m`,
      timestamp: new Date(newLocation.timestamp).toLocaleTimeString(),
      altitude: newLocation.altitude ? `${newLocation.altitude}m` : 'N/A'
    });
  }, []);

  const handleError = useCallback((error: GeolocationPositionError) => {
    let errorMessage = 'Erro desconhecido na geolocaliza√ß√£o';
    
    switch (error.code) {
      case error.PERMISSION_DENIED:
        errorMessage = 'Permiss√£o de localiza√ß√£o negada. Ative a localiza√ß√£o nas configura√ß√µes do navegador.';
        break;
      case error.POSITION_UNAVAILABLE:
        errorMessage = 'Localiza√ß√£o indispon√≠vel. Verifique se o GPS est√° ativo.';
        break;
      case error.TIMEOUT:
        errorMessage = 'Timeout na obten√ß√£o da localiza√ß√£o. Tentando novamente...';
        break;
    }

    setState(prev => ({
      ...prev,
      isLoading: false,
      error: errorMessage,
      attempts: prev.attempts + 1
    }));

    console.error('‚ùå Erro de geolocaliza√ß√£o:', {
      code: error.code,
      message: errorMessage,
      originalMessage: error.message
    });
  }, []);

  const getCurrentLocation = useCallback(async (forceNew = false) => {
    if (!navigator.geolocation) {
      setState(prev => ({
        ...prev,
        error: 'Geolocaliza√ß√£o n√£o suportada neste navegador',
        isLoading: false
      }));
      return;
    }

    // Limpar watch anterior se existir
    if (watchId) {
      navigator.geolocation.clearWatch(watchId);
      setWatchId(null);
    }

    setState(prev => ({
      ...prev,
      isLoading: true,
      error: null,
      attempts: forceNew ? 0 : prev.attempts
    }));

    // Configura√ß√µes otimizadas para m√°xima precis√£o
    const highAccuracyOptions: PositionOptions = {
      enableHighAccuracy: true,
      timeout: 15000, // 15 segundos
      maximumAge: 0 // Sempre buscar nova localiza√ß√£o
    };

    const fallbackOptions: PositionOptions = {
      enableHighAccuracy: false,
      timeout: 10000, // 10 segundos
      maximumAge: 0 // Sempre buscar nova localiza√ß√£o
    };

    try {
      console.log('üîç Iniciando obten√ß√£o de localiza√ß√£o com alta precis√£o...');
      
      // Primeira tentativa: alta precis√£o
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('‚úÖ Localiza√ß√£o obtida com alta precis√£o');
          updateLocation(position);
        },
        (error) => {
          // Se permiss√£o negada, n√£o tentar outras abordagens
          if (error.code === error.PERMISSION_DENIED) {
            console.log('‚ùå Permiss√£o de localiza√ß√£o negada - parando tentativas');
            handleError(error);
            return;
          }
          
          console.log('‚ö†Ô∏è Falha na alta precis√£o, tentando com precis√£o normal...');
          
          // Segunda tentativa: precis√£o normal
          navigator.geolocation.getCurrentPosition(
            (position) => {
              console.log('‚úÖ Localiza√ß√£o obtida com precis√£o normal');
              updateLocation(position);
            },
            (error) => {
              // Se permiss√£o negada, n√£o tentar watchPosition
              if (error.code === error.PERMISSION_DENIED) {
                console.log('‚ùå Permiss√£o de localiza√ß√£o negada - parando tentativas');
                handleError(error);
                return;
              }
              
              console.log('‚ö†Ô∏è Falha na precis√£o normal, iniciando monitoramento cont√≠nuo...');
              
              // Terceira tentativa: monitoramento cont√≠nuo
              const id = navigator.geolocation.watchPosition(
                (position) => {
                  console.log('‚úÖ Localiza√ß√£o obtida via monitoramento cont√≠nuo');
                  updateLocation(position);
                  
                  // Para o watch se conseguir uma precis√£o aceit√°vel (‚â§ 200m)
                  if (position.coords.accuracy <= 200) {
                    console.log('üéØ Precis√£o aceit√°vel alcan√ßada (‚â§200m), parando monitoramento');
                    navigator.geolocation.clearWatch(id);
                    setWatchId(null);
                  }
                },
                (watchError) => {
                  console.log('‚ùå Falha no monitoramento cont√≠nuo');
                  handleError(watchError);
                  navigator.geolocation.clearWatch(id);
                  setWatchId(null);
                },
                {
                  enableHighAccuracy: true,
                  timeout: 60000, // 60 segundos para cada tentativa
                  maximumAge: 0 // Sempre buscar nova localiza√ß√£o
                }
              );
              
              setWatchId(id);
              
              // Timeout de seguran√ßa para parar o watch ap√≥s 2 minutos
              setTimeout(() => {
                if (id) {
                  console.log('‚è∞ Timeout do monitoramento cont√≠nuo');
                  navigator.geolocation.clearWatch(id);
                  setWatchId(null);
                  setState(prev => ({
                    ...prev,
                    isLoading: false,
                    error: prev.location ? null : 'N√£o foi poss√≠vel obter uma localiza√ß√£o precisa'
                  }));
                }
              }, 120000); // 2 minutos
            },
            fallbackOptions
          );
        },
        highAccuracyOptions
      );
    } catch (error) {
      console.error('‚ùå Erro inesperado na geolocaliza√ß√£o:', error);
      handleError(error as GeolocationPositionError);
    }
  }, [updateLocation, handleError, watchId]);

  const clearWatch = useCallback(() => {
    if (watchId) {
      console.log('üõë Parando monitoramento de localiza√ß√£o');
      navigator.geolocation.clearWatch(watchId);
      setWatchId(null);
    }
  }, [watchId]);

  const forceNewLocation = useCallback(() => {
    console.log('üîÑ For√ßando nova localiza√ß√£o...');
    clearWatch();
    getCurrentLocation(true);
  }, [clearWatch, getCurrentLocation]);

  // Inicializar geolocaliza√ß√£o automaticamente
  useEffect(() => {
    console.log('üöÄ Inicializando geolocaliza√ß√£o autom√°tica...');
    getCurrentLocation();
  }, []);

  // Auto-update a cada 10 minutos (reduzido de 5 para economizar bateria)
  useEffect(() => {
    const interval = setInterval(() => {
      if (!state.isLoading && !watchId) {
        console.log('üîÑ Atualiza√ß√£o autom√°tica de localiza√ß√£o...');
        getCurrentLocation();
      }
    }, 600000); // 10 minutos

    return () => clearInterval(interval);
  }, [getCurrentLocation, state.isLoading, watchId]);

  // Cleanup no unmount
  useEffect(() => {
    return () => {
      console.log('üßπ Limpando recursos de geolocaliza√ß√£o...');
      clearWatch();
    };
  }, [clearWatch]);

  return {
    ...state,
    getCurrentLocation,
    forceNewLocation,
    clearWatch,
    isWatching: watchId !== null
  };
}